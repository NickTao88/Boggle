import java.util.*;
import java.io.*;
import java.util.Random;
public class Boggle {
  static Scanner myScanner = new Scanner(System.in);
  
  public static void main (String [] args) throws Exception{
    boolean gameRunning = true;
    File words = new java.io.File("wordlist.txt");
    Scanner input = new Scanner(words);
    ArrayList<String> wordArrayList = new ArrayList<String>();
    while(input.hasNext()){
      wordArrayList.add(input.nextLine());
    }
    Object[] wordlist = wordArrayList.toArray();
 
    //Iterate and convert to desired type
    for(Object o : wordlist) {
        String s = (String) o;
    }
    
    final int BOARD_SIZE = 5;
    String [] die = {"AAAFRS", "AAEEEE", "AAFIRS", "ADENNN", "AEEEEM", "AEEGMU", "AEGMNN", "AFIRSY", "BJKQXZ", "CCNSTW", "CEIILT", "CEILPT", "CEIPST", "DDLNOR", "DHHLOR", "DHHNOT", "DHLNOR", "EIIITT", "EMOTTT", "ENSSSU", "FIPRSY", "GORRVW", "HIPRRY", "NOOTUW", "OOOTTU"};
    
    
    while(gameRunning){
      System.out.println("Do you want to have 1 player or 2 players?");
      int playerNumber = myScanner.nextInt();
      System.out.println("Enter the score level you intend to play up to");
      int scoreLimit = myScanner.nextInt();
      System.out.println("Enter the minimum word length you prefer");
      int minWordLen = myScanner.nextInt();
      
      //2 PLAYER
      if(playerNumber == 2)
      {
        System.out.println("Player 1, please enter your name:");
        String p1 = myScanner.next();
        System.out.println("Player 2, please enter your name:");
        String p2 = myScanner.next();
        int score1 = 0;
        int score2 = 0;
        
        //flip a coin to see who goes first
        int flipCoin = (int)(Math.random()*2);
        if(flipCoin == 0){
          System.out.println(p1 + " you go first!");
        }
        if(flipCoin == 1){
          System.out.println(p1 + " you go first!");
          String temp = p1;
          p1 = p2;
          p2 = temp;
        }
        
        String board[][] = new String[BOARD_SIZE][BOARD_SIZE];
        ArrayList<String> wordsEnteredP1 = new ArrayList<String>();
        ArrayList<String> wordsEnteredP2 = new ArrayList<String>();
        int timesPassed1 = 0;
        int timesPassed2 = 0;
        randomizeBoard(board, die);
        
        while(gameRunning){
          //Start music
          if (timesPassed1 ==2 && timesPassed2 == 2) {
            randomizeBoard(board, die);
            wordsEnteredP1.clear();
            wordsEnteredP2.clear();
            timesPassed1 = 0;
            timesPassed2 = 0;
          }
          
          //print board
          for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
              System.out.print(board[i][j] +" ");
            }
            System.out.println("");
          }
          
          //P1
          System.out.println("“Player 1, do you want to pass? Enter ‘y’ for yes and ‘n’ for no”");
          String wantToPass1 = myScanner.next();
          if(wantToPass1.equals("y")){
            timesPassed1++;
          }
          if(wantToPass1.equals("n")){
            new Reminder(15);
            System.out.println("Time has started");
            System.out.println("Enter 1 to pause");
            while(timer < 15){ //NEEDS WORK
              System.out.println("Please enter the words: ");
              String word = myScanner.next();
              if(word.equals("1")){
                //pause timer
                System.out.println("Resume game by clicking ENTER");
                //resume timer
              }
              if(validate(word, minWordLen, wordsEnteredP1)) {
                score1+=word.length();
                wordsEnteredP1.add(word);
              }
            }
            System.out.println("TIMES UP!");          
          }
          
          //P2
          System.out.println("“Player 2, do you want to pass? Enter ‘y’ for yes and ‘n’ for no”");
          String wantToPass2 = myScanner.next();
          if(wantToPass2.equals("y")){
            timesPassed2++;
          }
          if(wantToPass2.equals("n")){
            new Reminder(15);
            System.out.println("Time has started");
            System.out.println("Enter 1 to pause");
            while(timer < 15){ //NEEDS WORK
              System.out.println("Please enter the words: ");
              String word = myScanner.next();
              if(word.equals("1")){
                //pause timer
                System.out.println("Resume game by clicking ENTER");
                //resume timer
              }
              if(validate(word, minWordLen, wordsEnteredP2)) {
                score2+=word.length();
                wordsEnteredP2.add(word);
              }
            }
            System.out.println("TIMES UP!");          
          }
          
          System.out.println(p1 + " :score: " + score1);
          System.out.println(p2 + " :score: " + score2);
          if(score1>score2 && score1 >= scoreLimit){
            System.out.println(p1+ " wins!");
          }else if(score2>score1 && score2 >= scoreLimit){
            System.out.println(p2+" wins!"); 
          }else if (score1 ==score2 && score1 >=scoreLimit){
            System.out.print("Tie game"); 
          }
          System.out.println("Do you want to restart or exit the game? [Enter ‘r’ for restart, or ‘e’ to exit]");
          String restartOrExit = myScanner.next();
          if(restartOrExit.equals("r")){
            //continue from outer while loop
          }else if(restartOrExit.equals("e")){
            //break from outer while loop
          }
          
          System.out.println("Do you want to play again?");
          String continueGame = myScanner.next();
          if(continueGame.equals("n")){
            gameRunning = false;
            System.out.println("Thanks for playing!");
          }else if(continueGame.equals("y")){
            //continue from outer while loop
          }
        }
      }
    }
  }


  
  public static void randomizeBoard (String [][] board, String [] die) {
    ArrayList <Integer> ranNums = new ArrayList <Integer>(); 
    for (int i = 0; i < die.length; i++) {
      ranNums.add(i); //initialize arraylist with values from 0 to die.length-1 (inclusive)
    }
    Collections.shuffle(ranNums); //randomize order of valyes
    
    int count = 0;
    for (int i = 0; i < board.length; i++) {
      for (int j = 0; j < board[i].length; j++) {
        board[i][j] = die[ranNums.get(count)]; //set board[i][j] to a previously generated random indexed String from die array
        int randIndex = (int)(Math.random() * (board[i][j]).length()); //generate random number from 0 to length of String
        board[i][j] = Character.toString(board[i][j].charAt(randIndex)); //set board[i][j] to a random character within the String
        count++; //add one to counter so that next previously generated random number gets used
      }
    }
    
  }
}
